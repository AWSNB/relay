{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Introduction Relay docs have moved to Sentry Docs . You will be redirected shortly.","title":"Introduction"},{"location":"#introduction","text":"Relay docs have moved to Sentry Docs . You will be redirected shortly.","title":"Introduction"},{"location":"architecture/","text":"Architecture This subsection contains internal docs that are useful for development and operation of Relay. Important Note : Relay is undergoing extensive internal restructuring. This includes: The introduction of Envelopes for event ingestion. Updated rate limits to handle items different from each other. Changes to the project configuration and fetching mechanism. Optimizations in the rate limiting fast path. Once these changes are completed, this document will be updated with new descriptions about event ingestion and the architecture.","title":"Architecture"},{"location":"architecture/#architecture","text":"This subsection contains internal docs that are useful for development and operation of Relay. Important Note : Relay is undergoing extensive internal restructuring. This includes: The introduction of Envelopes for event ingestion. Updated rate limits to handle items different from each other. Changes to the project configuration and fetching mechanism. Optimizations in the rate limiting fast path. Once these changes are completed, this document will be updated with new descriptions about event ingestion and the architecture.","title":"Architecture"},{"location":"architecture/actors/","text":"Actors This document describes how Relay works through the perspective of the system actors and the messages exchanged by them. TODO Short description about infrastructure (i.e. actix-web, actix, tokio, futures), note that we are using the old style Future trait, and actix 0.7.x . controller.rs events.rs The events.rs module contains functionality related to the processing of events. Raw events being sent to the system are first processed, and then sent to Sentry for saving. The module contains to actors: EventManager : an actor that receives all events, checks if the event should be processed (i.e. it is not filtered) and orchestrates all data needed for event processing. If the event should be processed it is passed to the EventProcessor . There is one EventManager in the system. EventProcessor : an CPU bound actor that receives all necessary project configuration and does the heavy lifting of processing the message (normalisation, PII stripping ...). There are multiple EventProcessor actors running in a thread pool. EventManager The EventManager is an actor running in the main system arbiter. The system arbiter is a asynchronous arbiter created when Relay starts. The upshot of this is that all processing done by the event manager should be extremly quick. It is ok to wait on I/O but no significant processing may be done in the EventManager . Once the EventManager had obtained the project state and had decided that the event should be processed the EventManager passes the event to the EventProcessor actors. TODO document all handlers EventProcessor The EventProcessor is an actor running in a SyncArbiter. There are multiple instances of the EventProcessor actor (roughly 1 per thread) ( TODO RaduW check that I'm not talking nonsense here.). The EventProcessor does the heavy lifting of event processing. The event processing does only synchronous work ( all the IO is handleed in the EventManager and all the needed state is passed to the EventProcessor ) Since all the work done by the event processor is the synchronous processing of an event there is only one type of message accepted by the EventProcessor actor: ProcessEvent The ProcessEvent handler prepares the event for ingestion. It normalizes the event, symbolicates its stack-trace and strips sensitive information (PPI stripping). TODO finish here keys.rs outcome.rs server.rs store.rs upstream.rs project.rs The project.rs module contains functionality related to the project state. Sentry events belong to projects and projects belong to organizations (Relay doesn't care at the moment about organizations). Projects serve to group the events (so that each Sentry customer can only see and deal with his/hers own events) and prescribe how messages are to be processed ( what should be filtered, which data inside the event should be anonymised (i.e PPI stripping), etc). All activities around obtaining, caching and refreshing the project state is handled in this module. The module contains two actors: Project : an actor that holds project data ProjectCache : an actor that holds references to Project actors. From a high level perspective one obtains a Project from the ProjectCache and then uses the Project in order to get 'project specific' information. Project The Project actor is responsible with decisions about how an event for a particular project should be handled. The project runs in an async arbiter ( I think it actully runs in the SystemArbiter TODO check ir that is true, or if it runs in another async arbiter). The system constructs an actor for each project used. The Project actor runs in an async context. The Project actor responds to the following message types: GetProjectId The GetProjectId handler returns the project_id (trivial functionality). GetProjectState The handler retuns the ProjectState , either directly (if it has a recent cached version) or by asking the ProjectCache to fetch it on its behalf. Pseudo Code if 'we have an up-to-date project state' return self . project_state if not self . receiver : # we don't have an already active request for the project state channel , receiver = 'create a channel and save its receiver' async : # ops that run at some time in the future project_state = await ProjectCache . send ( FetchProjectState ) channel . sender . push ( project_state ) # put the state on the channel when available channel = None # clenaup after we have pushed the ProjectState return future ( receiver ) # a Future that resolves with the ProjectState when available GetEventAction The handler answers the question: How should an event be handled? An event may be handled in one of three ways specified by the EventAction enum. pub enum EventAction { /// The event should be discarded. Discard ( DiscardReason ), /// The event should be discarded and the client should back off for some time. RetryAfter ( RateLimit ), /// The event should be processed and sent to upstream. Accept , } Pseudo Code if 'we have a cached rate limit value for the current event key' : return RetryAfter # the event is discarded without further processing if 'we have a recent project state' # Ask the ProjectState what to do with the msg return projectState . get_event_action ( event ) # No recent ProjectState, fetch it from the ProjectCache actor async : # ops that run at soem time in the future projectState = await ProjectCache . send ( FetchProjectState ) # return a future that will resolve when the project state becomes avaialble return future ( projectState . get_event_action ( event )) RateLimit The handler is used to update chached versions of project RateLimits. Pseudo Code if rate_limit . type not in self . rate_limit_cache self . rate_limit_cache . insert ( rate_limit ) # insert a new rate limit else if \"rate_limit expires sooner than the old cached value\" : self . rate_limit_cache . insert ( rate_limit ) # update old rate limit ProjectCache The ProjectCache actor is responsible for providing Project actors. The ProjectCache runs in an asynchronous context. There is only one instance of the ProjectCache in the system. The project runs in an async arbiter ( I think it actully runs in the SystemArbiter TODO check ir that is true, or if it runs in another async arbiter). The ProjectCache actor responds to the following messages: GetProject Retuns a Project actor for the required project. Pseudo Code if project_id not in self . project_cache : project = Project ( project_id ) project . start () self . project_cache [ project_id ] = project return self . project_cache [ porject_id ] FetchProjectState Registers the intention of a project to retrieve the project state. The FetchProjectState functionality logicaly belongs to the Project actor but it is handled by the ProjectCache in order to batch requests for the project state from multiple Project actors. A Project registers its desire to obtain its project state with the ProjectCache by sending the FetchProjectState and the ProjectCache batches all requests during a batching period and emits one request to the upstream (another Relay or the Sentry server) for all required project states. The handler checks if there is already a scheduled time for fetching project states and, if not, it schedules a delayed function that will do the actual fetching for all projects that registered their desire for getting the project state (see function: ProjectCache::fetch_states ). TODO: Add pseudo code UpdateLocalStates Updates project states for project states comming from a local file configuration.(TODO check if that is correct RaduW. 10.Oct.2019) This message is emmited periodically by a thread that loops and periodically checks the local file system for configuration changes (see function: poll_local_states ). Store endpoint request processing graph LR Store>/api/#PRJ#/store<br/>store.storeEvent] Upstream(UpstreamRelay) EvMan(EventManager) Proj(Project) EvProc[\"EventProcessor <br/>(sync)\"] Cache(ProjectCache) StoreF(StoreForwarder) Store-->|GetEventAction|Proj Store-->|GetProject|Cache Store-->|QueueEvent|EvMan Proj-->|FetchProjectState|Cache EvMan-->|GetProjectState|Proj EvMan-->|GetEventAction|Proj EvMan-->|RateLimit|Proj EvMan-->|HandleEvent|EvMan EvMan-->|GetProjectId|Proj EvMan-->|ProcessEvent|EvProc EvMan-->|StoreEvent|StoreF EvMan-->|SendRequest|Upstream Cache-->|UpdateLocalStates|Cache Event ingestion Title : Event Ingestion store_event --> ProjectCache : GetProject ProjectCache --> store_event : Project store_event --> Project : GetEventAction Project --> store_event : EventAction store_event --> EventManager : QueueEvent EventManager --> store_event : event_id EventManager --> EventManager : HandleEvent EventManager --> Project : GetProjectId Project --> EventManager : ProjectId EventManager --> Project : GetEventAction Project --> EventManager : EventAction EventManager --> Project : GetProjectState Project --> EventManager : ProjectState EventManager --> EventProcessor : ProcessEvent EventProcessor --> EventManager : ProcessEventResponse Server bootstrap main.main->cli.execute: cli.execute->cli.execute:make_app cli.execute->server.lib.run: server.lib.run->Controller: run Controller->server.actors.Server: start server.actors.Server->server.service:start server.service->ServiceState: start ServiceState start ServiceState->UpstreamRelay:start(config) ServiceState->EventManager:start(config, upstream_realy) ServiceState->KeyCache:start(config,upstream_relay) ServiceState->ProjectCache:start(config, upstream_relay)","title":"Actors"},{"location":"architecture/actors/#actors","text":"This document describes how Relay works through the perspective of the system actors and the messages exchanged by them. TODO Short description about infrastructure (i.e. actix-web, actix, tokio, futures), note that we are using the old style Future trait, and actix 0.7.x .","title":"Actors"},{"location":"architecture/actors/#controllerrs","text":"","title":"controller.rs"},{"location":"architecture/actors/#eventsrs","text":"The events.rs module contains functionality related to the processing of events. Raw events being sent to the system are first processed, and then sent to Sentry for saving. The module contains to actors: EventManager : an actor that receives all events, checks if the event should be processed (i.e. it is not filtered) and orchestrates all data needed for event processing. If the event should be processed it is passed to the EventProcessor . There is one EventManager in the system. EventProcessor : an CPU bound actor that receives all necessary project configuration and does the heavy lifting of processing the message (normalisation, PII stripping ...). There are multiple EventProcessor actors running in a thread pool.","title":"events.rs"},{"location":"architecture/actors/#eventmanager","text":"The EventManager is an actor running in the main system arbiter. The system arbiter is a asynchronous arbiter created when Relay starts. The upshot of this is that all processing done by the event manager should be extremly quick. It is ok to wait on I/O but no significant processing may be done in the EventManager . Once the EventManager had obtained the project state and had decided that the event should be processed the EventManager passes the event to the EventProcessor actors. TODO document all handlers","title":"EventManager"},{"location":"architecture/actors/#eventprocessor","text":"The EventProcessor is an actor running in a SyncArbiter. There are multiple instances of the EventProcessor actor (roughly 1 per thread) ( TODO RaduW check that I'm not talking nonsense here.). The EventProcessor does the heavy lifting of event processing. The event processing does only synchronous work ( all the IO is handleed in the EventManager and all the needed state is passed to the EventProcessor ) Since all the work done by the event processor is the synchronous processing of an event there is only one type of message accepted by the EventProcessor actor:","title":"EventProcessor"},{"location":"architecture/actors/#processevent","text":"The ProcessEvent handler prepares the event for ingestion. It normalizes the event, symbolicates its stack-trace and strips sensitive information (PPI stripping). TODO finish here","title":"ProcessEvent"},{"location":"architecture/actors/#keysrs","text":"","title":"keys.rs"},{"location":"architecture/actors/#outcomers","text":"","title":"outcome.rs"},{"location":"architecture/actors/#serverrs","text":"","title":"server.rs"},{"location":"architecture/actors/#storers","text":"","title":"store.rs"},{"location":"architecture/actors/#upstreamrs","text":"","title":"upstream.rs"},{"location":"architecture/actors/#projectrs","text":"The project.rs module contains functionality related to the project state. Sentry events belong to projects and projects belong to organizations (Relay doesn't care at the moment about organizations). Projects serve to group the events (so that each Sentry customer can only see and deal with his/hers own events) and prescribe how messages are to be processed ( what should be filtered, which data inside the event should be anonymised (i.e PPI stripping), etc). All activities around obtaining, caching and refreshing the project state is handled in this module. The module contains two actors: Project : an actor that holds project data ProjectCache : an actor that holds references to Project actors. From a high level perspective one obtains a Project from the ProjectCache and then uses the Project in order to get 'project specific' information.","title":"project.rs"},{"location":"architecture/actors/#project","text":"The Project actor is responsible with decisions about how an event for a particular project should be handled. The project runs in an async arbiter ( I think it actully runs in the SystemArbiter TODO check ir that is true, or if it runs in another async arbiter). The system constructs an actor for each project used. The Project actor runs in an async context. The Project actor responds to the following message types:","title":"Project"},{"location":"architecture/actors/#getprojectid","text":"The GetProjectId handler returns the project_id (trivial functionality).","title":"GetProjectId"},{"location":"architecture/actors/#getprojectstate","text":"The handler retuns the ProjectState , either directly (if it has a recent cached version) or by asking the ProjectCache to fetch it on its behalf.","title":"GetProjectState"},{"location":"architecture/actors/#pseudo-code","text":"if 'we have an up-to-date project state' return self . project_state if not self . receiver : # we don't have an already active request for the project state channel , receiver = 'create a channel and save its receiver' async : # ops that run at some time in the future project_state = await ProjectCache . send ( FetchProjectState ) channel . sender . push ( project_state ) # put the state on the channel when available channel = None # clenaup after we have pushed the ProjectState return future ( receiver ) # a Future that resolves with the ProjectState when available","title":"Pseudo Code"},{"location":"architecture/actors/#geteventaction","text":"The handler answers the question: How should an event be handled? An event may be handled in one of three ways specified by the EventAction enum. pub enum EventAction { /// The event should be discarded. Discard ( DiscardReason ), /// The event should be discarded and the client should back off for some time. RetryAfter ( RateLimit ), /// The event should be processed and sent to upstream. Accept , }","title":"GetEventAction"},{"location":"architecture/actors/#pseudo-code_1","text":"if 'we have a cached rate limit value for the current event key' : return RetryAfter # the event is discarded without further processing if 'we have a recent project state' # Ask the ProjectState what to do with the msg return projectState . get_event_action ( event ) # No recent ProjectState, fetch it from the ProjectCache actor async : # ops that run at soem time in the future projectState = await ProjectCache . send ( FetchProjectState ) # return a future that will resolve when the project state becomes avaialble return future ( projectState . get_event_action ( event ))","title":"Pseudo Code"},{"location":"architecture/actors/#ratelimit","text":"The handler is used to update chached versions of project RateLimits.","title":"RateLimit"},{"location":"architecture/actors/#pseudo-code_2","text":"if rate_limit . type not in self . rate_limit_cache self . rate_limit_cache . insert ( rate_limit ) # insert a new rate limit else if \"rate_limit expires sooner than the old cached value\" : self . rate_limit_cache . insert ( rate_limit ) # update old rate limit","title":"Pseudo Code"},{"location":"architecture/actors/#projectcache","text":"The ProjectCache actor is responsible for providing Project actors. The ProjectCache runs in an asynchronous context. There is only one instance of the ProjectCache in the system. The project runs in an async arbiter ( I think it actully runs in the SystemArbiter TODO check ir that is true, or if it runs in another async arbiter). The ProjectCache actor responds to the following messages:","title":"ProjectCache"},{"location":"architecture/actors/#getproject","text":"Retuns a Project actor for the required project.","title":"GetProject"},{"location":"architecture/actors/#pseudo-code_3","text":"if project_id not in self . project_cache : project = Project ( project_id ) project . start () self . project_cache [ project_id ] = project return self . project_cache [ porject_id ]","title":"Pseudo Code"},{"location":"architecture/actors/#fetchprojectstate","text":"Registers the intention of a project to retrieve the project state. The FetchProjectState functionality logicaly belongs to the Project actor but it is handled by the ProjectCache in order to batch requests for the project state from multiple Project actors. A Project registers its desire to obtain its project state with the ProjectCache by sending the FetchProjectState and the ProjectCache batches all requests during a batching period and emits one request to the upstream (another Relay or the Sentry server) for all required project states. The handler checks if there is already a scheduled time for fetching project states and, if not, it schedules a delayed function that will do the actual fetching for all projects that registered their desire for getting the project state (see function: ProjectCache::fetch_states ). TODO: Add pseudo code","title":"FetchProjectState"},{"location":"architecture/actors/#updatelocalstates","text":"Updates project states for project states comming from a local file configuration.(TODO check if that is correct RaduW. 10.Oct.2019) This message is emmited periodically by a thread that loops and periodically checks the local file system for configuration changes (see function: poll_local_states ). Store endpoint request processing graph LR Store>/api/#PRJ#/store<br/>store.storeEvent] Upstream(UpstreamRelay) EvMan(EventManager) Proj(Project) EvProc[\"EventProcessor <br/>(sync)\"] Cache(ProjectCache) StoreF(StoreForwarder) Store-->|GetEventAction|Proj Store-->|GetProject|Cache Store-->|QueueEvent|EvMan Proj-->|FetchProjectState|Cache EvMan-->|GetProjectState|Proj EvMan-->|GetEventAction|Proj EvMan-->|RateLimit|Proj EvMan-->|HandleEvent|EvMan EvMan-->|GetProjectId|Proj EvMan-->|ProcessEvent|EvProc EvMan-->|StoreEvent|StoreF EvMan-->|SendRequest|Upstream Cache-->|UpdateLocalStates|Cache Event ingestion Title : Event Ingestion store_event --> ProjectCache : GetProject ProjectCache --> store_event : Project store_event --> Project : GetEventAction Project --> store_event : EventAction store_event --> EventManager : QueueEvent EventManager --> store_event : event_id EventManager --> EventManager : HandleEvent EventManager --> Project : GetProjectId Project --> EventManager : ProjectId EventManager --> Project : GetEventAction Project --> EventManager : EventAction EventManager --> Project : GetProjectState Project --> EventManager : ProjectState EventManager --> EventProcessor : ProcessEvent EventProcessor --> EventManager : ProcessEventResponse Server bootstrap main.main->cli.execute: cli.execute->cli.execute:make_app cli.execute->server.lib.run: server.lib.run->Controller: run Controller->server.actors.Server: start server.actors.Server->server.service:start server.service->ServiceState: start ServiceState start ServiceState->UpstreamRelay:start(config) ServiceState->EventManager:start(config, upstream_realy) ServiceState->KeyCache:start(config,upstream_relay) ServiceState->ProjectCache:start(config, upstream_relay)","title":"UpdateLocalStates"},{"location":"architecture/ingest-event-path/","text":"Path of an Event through Relay Overview Simplified overview of event ingestion (ignores snuba/postprocessing): graph LR loadbalancer(Load Balancer) relay(Relay) projectconfigs(\"Project config endpoint (in Sentry)\") ingestconsumer(Ingest Consumer) outcomesconsumer(Outcomes Consumer) preprocess{\"<code>preprocess_event</code><br>(just a function call now)\"} process(<code>process_event</code>) save(<code>save_event</code>) loadbalancer-->relay relay---projectconfigs relay-->ingestconsumer relay-->outcomesconsumer ingestconsumer-->preprocess preprocess-->process preprocess-->save process-->save Processing enabled vs not? Relay can run as part of a Sentry installation, such as within sentry.io 's infrastructure, or next to the application as a forwarding proxy. A lot of steps described here are skipped or run in a limited form when Relay is not running with processing enabled: Event normalization does different (less) things. In certain modes, project config is not fetched from Sentry at all (but rather from disk or filled out with defaults). Events are forwarded to an HTTP endpoint instead of being written to Kafka. Rate limits are not calculated using Redis, instead Relay just honors 429s from previously mentioned endpoint. Filters are not applied at all. Inside the endpoint When an SDK hits /api/X/store on Relay, the code in server/src/endpoints/store.rs is called before returning a HTTP response. That code looks into an in-memory cache to answer basic information about a project such as: Does it exist? Is it suspended/disabled? Is it rate limited right now? If so, which key is rate limited? Which DSNs are valid for this project? Some of the data for this cache is coming from the projectconfigs endpoint . It is refreshed every couple of minutes, depending on configuration ( project_expiry ). If the cache is fresh, we may return a 429 for rate limits or a 4xx for invalid auth information. That cache might be empty or stale. If that is the case, Relay does not actually attempt to populate it at this stage. It just returns a 200 even though the event might be dropped later. This implies: The first store request that runs into a rate limit doesn't actually result in a 429 , but a subsequent request will (because by that time the project cache will have been updated). A store request for a non-existent project may result in a 200 , but subsequent ones will not. A store request with wrong auth information may result in a 200 , but subsequent ones will not. Filters are also not applied at this stage, so a filtered event will always result in a 200 . This matches the Python behavior since a while now . These examples assume that a project receives one event at a time. In practice one may observe that a highly concurrent burst of store requests for a single project results in 200 OK s only. However, a multi-second flood of incoming events should quickly result in eventually consistent and correct status codes. The response is completed at this point. All expensive work (such as talking to external services) is deferred into a background task. Except for responding to the HTTP request, there's no I/O done in the endpoint in any form. We didn't even hit Redis to calculate rate limits. Summary The HTTP response returned is just a best-effort guess at what the actual outcome of the event is going to be. We only return a 4xx code if we know that the response will fail (based on cached information), if we don't we return a 200 and continue to process the event asynchronously. This asynchronous processing used to happen synchronously in the Python implementation of StoreView . The effect of this is that the server will respond much faster that before but we might return 200 for events that will ultimately not be accepted. Generally Relay will return a 200 in many more situations than the old StoreView . The background task The HTTP response is out by now. The rest of what used to happen synchronously in the Python StoreView is done asynchronously, but still in the same process. So, now to the real work: Project config is fetched. If the project cache is stale or missing, we fetch it. We may wait a couple milliseconds ( batch_interval ) here to be able to batch multiple project config fetches into the same HTTP request to not overload Sentry too much. At this stage Relay may drop the event because it realized that the DSN was invalid or the project didn't even exist. The next incoming event will get a proper 4xx status code. The event is parsed. In the endpoint we only did decompression, a basic JSON syntax check, and extraction of the event ID to be able to return it as part of the response. Now we create an Event struct, which conceptually is the equivalent to parsing it into a Python dictionary: We allocate more memory. The event is normalized. Event normalization is probably the most CPU-intensive task running in Relay. It discards invalid data, moves data from deprecated fields to newer fields and generally just does schema validation. Filters (\"inbound filters\") are applied. Event may be discarded because of IP addresses, patterns on the error message or known web crawlers. Exact rate limits (\"quotas\") are applied. is_rate_limited.lua is executed on Redis. The input parameters for is_rate_limited.lua (\"quota objects\") are part of the project config. See this pull request for an explanation of what quota objects are. The event may be discarded here. If so, we write the rate limit info (reason and expiration timestamp) into the in-memory project cache so that the next store request returns a 429 in the endpoint and doesn't hit Redis at all. This contraption has the advantage that suspended or permanently rate-limited projects are very cheap to handle, and do not involve external services (ignoring the polling of the project config every couple of minutes). The event is datascrubbed. We have a PII config (new format) and a datascrubbing config (old format, converted to new format on the fly) as part of the project config fetched from Sentry. Event is written to Kafka. Note: If we discard an event at any point, an outcome is written to Kafka if Relay is configured to do so. Summary For events that returned a 200 we spawn an in-process background task that does the rest of what the old StoreView did. This task updates in-memory state for rate limits and disabled projects/keys. The outcomes consumer Outcomes are small messages in Kafka that contain an event ID and information about whether that event was rejected, and if so, why. The outcomes consumer is mostly responsible for updating (user-visible) counters in Sentry (buffers/counters and tsdb, which are two separate systems). The ingest consumer The ingest consumer reads accepted events from Kafka, and also updates some stats. Some of those stats are billing-relevant. Its main purpose is to do what insert_data_to_database in Python store did: Call preprocess_event , after which comes sourcemap processing, native symbolication, grouping, snuba and all that other stuff that is of no concern to Relay. Sequence diagram of components inside Relay sequenceDiagram participant sdk as SDK participant endpoint as Endpoint participant projectcache as ProjectCache participant eventmanager as EventManager participant cpupool as CPU Pool sdk->>endpoint:POST /api/42/store activate endpoint endpoint->>projectcache: get project (cached only) activate projectcache projectcache-->>endpoint: return project deactivate projectcache Note over endpoint: Checking rate limits and auth (fast path) endpoint->>eventmanager: queue event activate eventmanager eventmanager-->>endpoint:event ID endpoint-->>sdk:200 OK deactivate endpoint eventmanager->>projectcache:fetch project activate projectcache Note over eventmanager,projectcache: web request (batched with other projects) projectcache-->>eventmanager: return project deactivate projectcache eventmanager->>cpupool: . activate cpupool Note over eventmanager,cpupool: normalization, datascrubbing, redis rate limits, ... cpupool-->>eventmanager: . deactivate cpupool Note over eventmanager: Send event to kafka deactivate eventmanager","title":"Path of an Event through Relay"},{"location":"architecture/ingest-event-path/#path-of-an-event-through-relay","text":"","title":"Path of an Event through Relay"},{"location":"architecture/ingest-event-path/#overview","text":"Simplified overview of event ingestion (ignores snuba/postprocessing): graph LR loadbalancer(Load Balancer) relay(Relay) projectconfigs(\"Project config endpoint (in Sentry)\") ingestconsumer(Ingest Consumer) outcomesconsumer(Outcomes Consumer) preprocess{\"<code>preprocess_event</code><br>(just a function call now)\"} process(<code>process_event</code>) save(<code>save_event</code>) loadbalancer-->relay relay---projectconfigs relay-->ingestconsumer relay-->outcomesconsumer ingestconsumer-->preprocess preprocess-->process preprocess-->save process-->save","title":"Overview"},{"location":"architecture/ingest-event-path/#processing-enabled-vs-not","text":"Relay can run as part of a Sentry installation, such as within sentry.io 's infrastructure, or next to the application as a forwarding proxy. A lot of steps described here are skipped or run in a limited form when Relay is not running with processing enabled: Event normalization does different (less) things. In certain modes, project config is not fetched from Sentry at all (but rather from disk or filled out with defaults). Events are forwarded to an HTTP endpoint instead of being written to Kafka. Rate limits are not calculated using Redis, instead Relay just honors 429s from previously mentioned endpoint. Filters are not applied at all.","title":"Processing enabled vs not?"},{"location":"architecture/ingest-event-path/#inside-the-endpoint","text":"When an SDK hits /api/X/store on Relay, the code in server/src/endpoints/store.rs is called before returning a HTTP response. That code looks into an in-memory cache to answer basic information about a project such as: Does it exist? Is it suspended/disabled? Is it rate limited right now? If so, which key is rate limited? Which DSNs are valid for this project? Some of the data for this cache is coming from the projectconfigs endpoint . It is refreshed every couple of minutes, depending on configuration ( project_expiry ). If the cache is fresh, we may return a 429 for rate limits or a 4xx for invalid auth information. That cache might be empty or stale. If that is the case, Relay does not actually attempt to populate it at this stage. It just returns a 200 even though the event might be dropped later. This implies: The first store request that runs into a rate limit doesn't actually result in a 429 , but a subsequent request will (because by that time the project cache will have been updated). A store request for a non-existent project may result in a 200 , but subsequent ones will not. A store request with wrong auth information may result in a 200 , but subsequent ones will not. Filters are also not applied at this stage, so a filtered event will always result in a 200 . This matches the Python behavior since a while now . These examples assume that a project receives one event at a time. In practice one may observe that a highly concurrent burst of store requests for a single project results in 200 OK s only. However, a multi-second flood of incoming events should quickly result in eventually consistent and correct status codes. The response is completed at this point. All expensive work (such as talking to external services) is deferred into a background task. Except for responding to the HTTP request, there's no I/O done in the endpoint in any form. We didn't even hit Redis to calculate rate limits. Summary The HTTP response returned is just a best-effort guess at what the actual outcome of the event is going to be. We only return a 4xx code if we know that the response will fail (based on cached information), if we don't we return a 200 and continue to process the event asynchronously. This asynchronous processing used to happen synchronously in the Python implementation of StoreView . The effect of this is that the server will respond much faster that before but we might return 200 for events that will ultimately not be accepted. Generally Relay will return a 200 in many more situations than the old StoreView .","title":"Inside the endpoint"},{"location":"architecture/ingest-event-path/#the-background-task","text":"The HTTP response is out by now. The rest of what used to happen synchronously in the Python StoreView is done asynchronously, but still in the same process. So, now to the real work: Project config is fetched. If the project cache is stale or missing, we fetch it. We may wait a couple milliseconds ( batch_interval ) here to be able to batch multiple project config fetches into the same HTTP request to not overload Sentry too much. At this stage Relay may drop the event because it realized that the DSN was invalid or the project didn't even exist. The next incoming event will get a proper 4xx status code. The event is parsed. In the endpoint we only did decompression, a basic JSON syntax check, and extraction of the event ID to be able to return it as part of the response. Now we create an Event struct, which conceptually is the equivalent to parsing it into a Python dictionary: We allocate more memory. The event is normalized. Event normalization is probably the most CPU-intensive task running in Relay. It discards invalid data, moves data from deprecated fields to newer fields and generally just does schema validation. Filters (\"inbound filters\") are applied. Event may be discarded because of IP addresses, patterns on the error message or known web crawlers. Exact rate limits (\"quotas\") are applied. is_rate_limited.lua is executed on Redis. The input parameters for is_rate_limited.lua (\"quota objects\") are part of the project config. See this pull request for an explanation of what quota objects are. The event may be discarded here. If so, we write the rate limit info (reason and expiration timestamp) into the in-memory project cache so that the next store request returns a 429 in the endpoint and doesn't hit Redis at all. This contraption has the advantage that suspended or permanently rate-limited projects are very cheap to handle, and do not involve external services (ignoring the polling of the project config every couple of minutes). The event is datascrubbed. We have a PII config (new format) and a datascrubbing config (old format, converted to new format on the fly) as part of the project config fetched from Sentry. Event is written to Kafka. Note: If we discard an event at any point, an outcome is written to Kafka if Relay is configured to do so. Summary For events that returned a 200 we spawn an in-process background task that does the rest of what the old StoreView did. This task updates in-memory state for rate limits and disabled projects/keys.","title":"The background task"},{"location":"architecture/ingest-event-path/#the-outcomes-consumer","text":"Outcomes are small messages in Kafka that contain an event ID and information about whether that event was rejected, and if so, why. The outcomes consumer is mostly responsible for updating (user-visible) counters in Sentry (buffers/counters and tsdb, which are two separate systems).","title":"The outcomes consumer"},{"location":"architecture/ingest-event-path/#the-ingest-consumer","text":"The ingest consumer reads accepted events from Kafka, and also updates some stats. Some of those stats are billing-relevant. Its main purpose is to do what insert_data_to_database in Python store did: Call preprocess_event , after which comes sourcemap processing, native symbolication, grouping, snuba and all that other stuff that is of no concern to Relay.","title":"The ingest consumer"},{"location":"architecture/ingest-event-path/#sequence-diagram-of-components-inside-relay","text":"sequenceDiagram participant sdk as SDK participant endpoint as Endpoint participant projectcache as ProjectCache participant eventmanager as EventManager participant cpupool as CPU Pool sdk->>endpoint:POST /api/42/store activate endpoint endpoint->>projectcache: get project (cached only) activate projectcache projectcache-->>endpoint: return project deactivate projectcache Note over endpoint: Checking rate limits and auth (fast path) endpoint->>eventmanager: queue event activate eventmanager eventmanager-->>endpoint:event ID endpoint-->>sdk:200 OK deactivate endpoint eventmanager->>projectcache:fetch project activate projectcache Note over eventmanager,projectcache: web request (batched with other projects) projectcache-->>eventmanager: return project deactivate projectcache eventmanager->>cpupool: . activate cpupool Note over eventmanager,cpupool: normalization, datascrubbing, redis rate limits, ... cpupool-->>eventmanager: . deactivate cpupool Note over eventmanager: Send event to kafka deactivate eventmanager","title":"Sequence diagram of components inside Relay"},{"location":"architecture/project-configuration/","text":"Project configuration This document describes how Relay deals with project configurations. Overview Getting a project Here is how we obtain a Project actor ( used to get project configuration). Legend Redis Proj Cache = Redis Project Cache Upstream Source = Upstream Project Source sequenceDiagram participant extern as Some Actor participant projCache as Project Cache participant proj as Project participant redis as Redis Proj Cache participant upstream as Upstream Source Note over extern, upstream : Getting a Project returns a Project actor from the cache or simply creates a new Project actor and returns it extern->>projCache: GetProject(projId) activate projCache alt projId in ProjectCache projCache-->>extern: Project else projeId not found in cache projCache->>projCache: Project::new(projId, now) projCache-->>extern: Project end deactivate projCache Getting a project state Here is how we obtain project configuration. Legend Proj Cache = Project Cache Proj Loc Info = Project Local Info Redis Proj Cache = Redis Project Cache Upstream Source = Upstream Project Source sequenceDiagram participant extern as Some Actor participant projCache as Proj Cache participant local as Proj Loc Info participant proj as Project participant redis as Redis Proj Cache participant upstream as Upstream Source Note over extern, upstream : Fetching a Project state extern->>projCache: FetchProjectState(projId) activate projCache opt proj in cache Note right of projCache: Update last used projCache->>projCache: proj.last_update = now end opt projectLocal != None projCache ->> local: FetchOptionalProjectState(projId) activate local local -->> projCache: Option<ProjectState> deactivate local end alt projState != None projCache -->>extern: ProjectState else projState == None opt has redis cache projCache ->> redis: FetchOptionalProjectState(projId) activate redis redis -->> projCache: Option<ProjectState> deactivate redis end alt projState != None projCache -->> extern: ProjectState else projState == None projCache ->> upstream: FetchProjectState(projId) activate upstream upstream -->> extern: ProjectState deactivate upstream end end deactivate projCache Fetching the project state from Redis Fetching the project state from redis is straight forward. Relay does not do any sort of management of project states in Redis. From Relay's point of view a project state is either in Redis (and then it uses it as a result) or it isn't and then it looks for the project state in other places (upstream). If Relay obtains the project state from Upstream it will NOT insert it in Redis. It is up to other, external systems, to manage project states and add/remove/refresh them in Redis. Fetching the project state from Upstream If everything else fails and the ProjectCache can't obtain a project state from one of the chaches the Upstream will be queried for the ProjectState. Here's what happens in the Upstream actor Legend State Channel - Project State Channel Upstream Source - Upstream Project Source sequenceDiagram participant extern as Some Actor participant upstream as Upstream Source participant timer as Timer participant channel as State Channel participant http as Upstream Source extern->>upstream: FetchProjectState(projId) activate extern activate upstream upstream-->>timer: schedule_fetch() activate timer note right of upstream: Will return the <br> receiver of a <br> Project Channel upstream->>upstream: getOrCreateChannel(projId) note right of timer: at regular intervals timer->>upstream: fetch_states() deactivate timer activate upstream loop batch requests upstream->>http: GetProjectStates() activate http http->>upstream: GetProjectStatesResponse deactivate http end loop project states upstream->>channel: send(ProjectState) activate channel deactivate upstream end deactivate upstream channel->>extern: ProjectState deactivate channel deactivate extern .","title":"Project configuration"},{"location":"architecture/project-configuration/#project-configuration","text":"This document describes how Relay deals with project configurations.","title":"Project configuration"},{"location":"architecture/project-configuration/#overview","text":"","title":"Overview"},{"location":"architecture/project-configuration/#getting-a-project","text":"Here is how we obtain a Project actor ( used to get project configuration). Legend Redis Proj Cache = Redis Project Cache Upstream Source = Upstream Project Source sequenceDiagram participant extern as Some Actor participant projCache as Project Cache participant proj as Project participant redis as Redis Proj Cache participant upstream as Upstream Source Note over extern, upstream : Getting a Project returns a Project actor from the cache or simply creates a new Project actor and returns it extern->>projCache: GetProject(projId) activate projCache alt projId in ProjectCache projCache-->>extern: Project else projeId not found in cache projCache->>projCache: Project::new(projId, now) projCache-->>extern: Project end deactivate projCache","title":"Getting a project"},{"location":"architecture/project-configuration/#getting-a-project-state","text":"Here is how we obtain project configuration. Legend Proj Cache = Project Cache Proj Loc Info = Project Local Info Redis Proj Cache = Redis Project Cache Upstream Source = Upstream Project Source sequenceDiagram participant extern as Some Actor participant projCache as Proj Cache participant local as Proj Loc Info participant proj as Project participant redis as Redis Proj Cache participant upstream as Upstream Source Note over extern, upstream : Fetching a Project state extern->>projCache: FetchProjectState(projId) activate projCache opt proj in cache Note right of projCache: Update last used projCache->>projCache: proj.last_update = now end opt projectLocal != None projCache ->> local: FetchOptionalProjectState(projId) activate local local -->> projCache: Option<ProjectState> deactivate local end alt projState != None projCache -->>extern: ProjectState else projState == None opt has redis cache projCache ->> redis: FetchOptionalProjectState(projId) activate redis redis -->> projCache: Option<ProjectState> deactivate redis end alt projState != None projCache -->> extern: ProjectState else projState == None projCache ->> upstream: FetchProjectState(projId) activate upstream upstream -->> extern: ProjectState deactivate upstream end end deactivate projCache","title":"Getting a project state"},{"location":"architecture/project-configuration/#fetching-the-project-state-from-redis","text":"Fetching the project state from redis is straight forward. Relay does not do any sort of management of project states in Redis. From Relay's point of view a project state is either in Redis (and then it uses it as a result) or it isn't and then it looks for the project state in other places (upstream). If Relay obtains the project state from Upstream it will NOT insert it in Redis. It is up to other, external systems, to manage project states and add/remove/refresh them in Redis.","title":"Fetching the project state from Redis"},{"location":"architecture/project-configuration/#fetching-the-project-state-from-upstream","text":"If everything else fails and the ProjectCache can't obtain a project state from one of the chaches the Upstream will be queried for the ProjectState. Here's what happens in the Upstream actor Legend State Channel - Project State Channel Upstream Source - Upstream Project Source sequenceDiagram participant extern as Some Actor participant upstream as Upstream Source participant timer as Timer participant channel as State Channel participant http as Upstream Source extern->>upstream: FetchProjectState(projId) activate extern activate upstream upstream-->>timer: schedule_fetch() activate timer note right of upstream: Will return the <br> receiver of a <br> Project Channel upstream->>upstream: getOrCreateChannel(projId) note right of timer: at regular intervals timer->>upstream: fetch_states() deactivate timer activate upstream loop batch requests upstream->>http: GetProjectStates() activate http http->>upstream: GetProjectStatesResponse deactivate http end loop project states upstream->>channel: send(ProjectState) activate channel deactivate upstream end deactivate upstream channel->>extern: ProjectState deactivate channel deactivate extern .","title":"Fetching the project state from Upstream"},{"location":"pii-config/","text":"PII Configuration The following document explores the syntax and semantics of the new datascrubbing (\"PII\") configuration consumed by Relay . A Basic Example Say you have an exception message which, unfortunately, contains IP addresses which are not supposed to be there. You'd write: { \"applications\" : { \"$string\" : [ \"@ip:replace\" ] } } It reads as \"replace all IP addresses in all strings\", or \"apply @ip:replace to all $string fields\". @ip:replace is called a rule, and $string is a selector . Built-in Rules The following rules exist by default: @ip:replace and @ip:hash for replacing IP addresses. @imei:replace and @imei:hash for replacing IMEIs @mac:replace , @mac:mask and @mac:hash for matching MAC addresses @email:mask , @email:replace and @email:hash for matching email addresses @creditcard:mask , @creditcard:replace and @creditcard:hash for matching creditcard numbers @userpath:replace and @userpath:hash for matching local paths (e.g. C:/Users/foo/ ) @password:remove for removing passwords. In this case we're pattern matching against the field's key, whether it contains password , credentials or similar strings. @anything:remove , @anything:replace and @anything:hash for removing, replacing or hashing any value. It is essentially equivalent to a wildcard-regex, but it will also match much more than strings. Writing Your Own Rules Rules generally consist of two parts: Rule types describe what to match. See PII Rule Types for an exhaustive list. Rule redaction methods describe what to do with the match. See PII Redaction Methods for a list. Each page comes with examples. Try those examples out by pasting them into the \"PII config\" column of Piinguin and clicking on fields to get suggestions. Interactive Editing The easiest way to go about this is if you already have a raw JSON payload from some SDK. Go to our PII config editor Piinguin , and: Paste in a raw event Click on data you want eliminated Paste in other payloads and see if they look fine, go to step 2 if necessary. After iterating on the config, paste it back into the project config located at .relay/projects/<PROJECT_ID>.json For example: { \"publicKeys\" : [ { \"publicKey\" : \"___PUBLIC_KEY___\" , \"isEnabled\" : true } ], \"config\" : { \"allowedDomains\" : [ \"*\" ], \"piiConfig\" : { \"rules\" : { \"device_id\" : { \"type\" : \"pattern\" , \"pattern\" : \"d/[a-f0-9]{12}\" , \"redaction\" : { \"method\" : \"hash\" } } }, \"applications\" : { \"freeform\" : [ \"device_id\" ] } } } }","title":"PII Configuration"},{"location":"pii-config/#pii-configuration","text":"The following document explores the syntax and semantics of the new datascrubbing (\"PII\") configuration consumed by Relay .","title":"PII Configuration"},{"location":"pii-config/#a-basic-example","text":"Say you have an exception message which, unfortunately, contains IP addresses which are not supposed to be there. You'd write: { \"applications\" : { \"$string\" : [ \"@ip:replace\" ] } } It reads as \"replace all IP addresses in all strings\", or \"apply @ip:replace to all $string fields\". @ip:replace is called a rule, and $string is a selector .","title":"A Basic Example"},{"location":"pii-config/#built-in-rules","text":"The following rules exist by default: @ip:replace and @ip:hash for replacing IP addresses. @imei:replace and @imei:hash for replacing IMEIs @mac:replace , @mac:mask and @mac:hash for matching MAC addresses @email:mask , @email:replace and @email:hash for matching email addresses @creditcard:mask , @creditcard:replace and @creditcard:hash for matching creditcard numbers @userpath:replace and @userpath:hash for matching local paths (e.g. C:/Users/foo/ ) @password:remove for removing passwords. In this case we're pattern matching against the field's key, whether it contains password , credentials or similar strings. @anything:remove , @anything:replace and @anything:hash for removing, replacing or hashing any value. It is essentially equivalent to a wildcard-regex, but it will also match much more than strings.","title":"Built-in Rules"},{"location":"pii-config/#writing-your-own-rules","text":"Rules generally consist of two parts: Rule types describe what to match. See PII Rule Types for an exhaustive list. Rule redaction methods describe what to do with the match. See PII Redaction Methods for a list. Each page comes with examples. Try those examples out by pasting them into the \"PII config\" column of Piinguin and clicking on fields to get suggestions.","title":"Writing Your Own Rules"},{"location":"pii-config/#interactive-editing","text":"The easiest way to go about this is if you already have a raw JSON payload from some SDK. Go to our PII config editor Piinguin , and: Paste in a raw event Click on data you want eliminated Paste in other payloads and see if they look fine, go to step 2 if necessary. After iterating on the config, paste it back into the project config located at .relay/projects/<PROJECT_ID>.json For example: { \"publicKeys\" : [ { \"publicKey\" : \"___PUBLIC_KEY___\" , \"isEnabled\" : true } ], \"config\" : { \"allowedDomains\" : [ \"*\" ], \"piiConfig\" : { \"rules\" : { \"device_id\" : { \"type\" : \"pattern\" , \"pattern\" : \"d/[a-f0-9]{12}\" , \"redaction\" : { \"method\" : \"hash\" } } }, \"applications\" : { \"freeform\" : [ \"device_id\" ] } } } }","title":"Interactive Editing"},{"location":"pii-config/methods/","text":"PII Redaction Methods remove Remove the entire field. Relay may choose to either set it to null or to remove it entirely. { \"rules\" : { \"remove_ip\" : { \"type\" : \"ip\" , \"redaction\" : { \"method\" : \"remove\" } } }, \"applications\" : { \"$string\" : [ \"remove_ip\" ] } } replace Replace the key with a static string. { \"rules\" : { \"replace_ip\" : { \"type\" : \"ip\" , \"redaction\" : { \"method\" : \"replace\" , \"text\" : [ censored ] \" } } }, \" applications \": { \" $string \": [\" replace_ip\"] } } mask Replace every character of the matched string with a \"masking\" char. Compared to replace this preserves the length of the original string. { \"rules\" : { \"mask_ip\" : { \"type\" : \"ip\" , \"redaction\" : { \"method\" : \"mask\" , \"mask_char\" : \"0\" , // The character used for masking. Optional, default \"*\" \"chars_to_ignore\" : \".\" , // Which characters to ignore. Optional, default empty \"range\" : [ 0 , - 1 ] // Which range of the string to replace. Optional, defaults to full range. Negative indices count from the matches' end. } } }, \"applications\" : { \"$string\" : [ \"mask_ip\" ] } } hash Replace the string with a hashed version of itself. Equal strings will produce the same hash, so if you, for example, decide to hash the user ID instead of replacing or removing it, you will still have an accurate count of users affected. { \"rules\" : { \"hash_ip\" : { \"type\" : \"ip\" , \"redaction\" : { \"method\" : \"hash\" , \"algorithm\" : \"HMAC-SHA1\" , // One of \"HMAC-SHA1\", \"HMAC-SHA256\", \"HMAC-SHA512\" \"key\" : \"myOverriddenKey\" // A key to salt the hash with. Defaults to the default key set in \"vars\" } } }, \"vars\" : { \"hashKey\" : \"myDefaultKey\" // The default key to use } \"applications\" : { \"$string\" : [ \"mask_ip\" ] } }","title":"PII Redaction Methods"},{"location":"pii-config/methods/#pii-redaction-methods","text":"","title":"PII Redaction Methods"},{"location":"pii-config/methods/#remove","text":"Remove the entire field. Relay may choose to either set it to null or to remove it entirely. { \"rules\" : { \"remove_ip\" : { \"type\" : \"ip\" , \"redaction\" : { \"method\" : \"remove\" } } }, \"applications\" : { \"$string\" : [ \"remove_ip\" ] } }","title":"remove"},{"location":"pii-config/methods/#replace","text":"Replace the key with a static string. { \"rules\" : { \"replace_ip\" : { \"type\" : \"ip\" , \"redaction\" : { \"method\" : \"replace\" , \"text\" : [ censored ] \" } } }, \" applications \": { \" $string \": [\" replace_ip\"] } }","title":"replace"},{"location":"pii-config/methods/#mask","text":"Replace every character of the matched string with a \"masking\" char. Compared to replace this preserves the length of the original string. { \"rules\" : { \"mask_ip\" : { \"type\" : \"ip\" , \"redaction\" : { \"method\" : \"mask\" , \"mask_char\" : \"0\" , // The character used for masking. Optional, default \"*\" \"chars_to_ignore\" : \".\" , // Which characters to ignore. Optional, default empty \"range\" : [ 0 , - 1 ] // Which range of the string to replace. Optional, defaults to full range. Negative indices count from the matches' end. } } }, \"applications\" : { \"$string\" : [ \"mask_ip\" ] } }","title":"mask"},{"location":"pii-config/methods/#hash","text":"Replace the string with a hashed version of itself. Equal strings will produce the same hash, so if you, for example, decide to hash the user ID instead of replacing or removing it, you will still have an accurate count of users affected. { \"rules\" : { \"hash_ip\" : { \"type\" : \"ip\" , \"redaction\" : { \"method\" : \"hash\" , \"algorithm\" : \"HMAC-SHA1\" , // One of \"HMAC-SHA1\", \"HMAC-SHA256\", \"HMAC-SHA512\" \"key\" : \"myOverriddenKey\" // A key to salt the hash with. Defaults to the default key set in \"vars\" } } }, \"vars\" : { \"hashKey\" : \"myDefaultKey\" // The default key to use } \"applications\" : { \"$string\" : [ \"mask_ip\" ] } }","title":"hash"},{"location":"pii-config/selectors/","text":"PII Selectors Selectors allow you to restrict rules to certain parts of the event. This is useful to unconditionally remove certain data by variable/field name from the event, but can also be used to conservatively test rules on real data. Data scrubbing always works on the raw event payload. Keep in mind that some fields in the UI may be called differently in the JSON schema. When looking at an event there should always be a link called \"JSON\" present that allows you to see what the data scrubber sees. For example, what is called \"Additional Data\" in the UI is called extra in the event payload. To remove a specific key called foo , you would write: [ Remove ] [ Anything ] from [ extra.foo ] Another example. Sentry knows about two kinds of error messages: The exception message, and the top-level log message. Here is an example of how such an event payload as sent by the SDK (and downloadable from the UI) would look like: { \"logentry\" : { \"formatted\" : \"Failed to roll out the dinglebop\" }, \"exceptions\" : { \"values\" : [ { \"type\" : \"ZeroDivisionError\" , \"value\" : \"integer division or modulo by zero\" , } ] } } Since the \"error message\" is taken from the exception 's value , and the \"message\" is taken from logentry , we would have to write the following to remove both from the event: [Remove] [Anything] from [exception.value] [Remove] [Anything] from [logentry.formatted] Boolean Logic You can combine selectors using boolean logic. Prefix with ! to invert the selector. foo matches the JSON key foo , while !foo matches everything but foo . Build the conjunction (AND) using && , such as: foo && !extra.foo to match the key foo except when inside of extra . Build the disjunction (OR) using || , such as: foo || bar to match foo or bar . Wildcards ** matches all subpaths, so that foo.** matches all JSON keys within foo . * matches a single path item, so that foo.* matches all JSON keys one level below foo . Value Types Select subsections by JSON-type using the following: $string matches any string value $number matches any integer or float value $datetime matches any field in the event that represents a timestamp $array matches any JSON array value $object matches any JSON object Select known parts of the schema using the following: $exception matches a single exception instance in {\"exception\": {\"values\": [...]}} $stacktrace matches a stack trace instance $frame matches a frame $request matches the HTTP request context of an event $user matches the user context of an event $logentry (also applies to the message attribute) $thread matches a single thread instance in {\"threads\": {\"values\": [...]}} $breadcrumb matches a single breadcrumb in {\"breadcrumbs\": [...]} $span matches a trace span $sdk matches the SDK context in {\"sdk\": ...} Examples Delete event.user : [ Remove ] [ Anything ] from [ $user ] Delete all frame-local variables: [ Remove ] [ Anything ] from [ $frame.vars ] Escaping Specal Characters If the object key you want to match contains whitespace or special characters, you can use quotes to escape it: [ Remove ] [ Anything ] from [ extra.'my special value' ] This matches the key my special value in Additional Data . To escape ' (single quote) within the quotes, replace it with '' (two quotes): [ Remove ] [ Anything ] from [ extra.'my special '' value' ] This matches the key my special ' value in Additional Data .","title":"PII Selectors"},{"location":"pii-config/selectors/#pii-selectors","text":"Selectors allow you to restrict rules to certain parts of the event. This is useful to unconditionally remove certain data by variable/field name from the event, but can also be used to conservatively test rules on real data. Data scrubbing always works on the raw event payload. Keep in mind that some fields in the UI may be called differently in the JSON schema. When looking at an event there should always be a link called \"JSON\" present that allows you to see what the data scrubber sees. For example, what is called \"Additional Data\" in the UI is called extra in the event payload. To remove a specific key called foo , you would write: [ Remove ] [ Anything ] from [ extra.foo ] Another example. Sentry knows about two kinds of error messages: The exception message, and the top-level log message. Here is an example of how such an event payload as sent by the SDK (and downloadable from the UI) would look like: { \"logentry\" : { \"formatted\" : \"Failed to roll out the dinglebop\" }, \"exceptions\" : { \"values\" : [ { \"type\" : \"ZeroDivisionError\" , \"value\" : \"integer division or modulo by zero\" , } ] } } Since the \"error message\" is taken from the exception 's value , and the \"message\" is taken from logentry , we would have to write the following to remove both from the event: [Remove] [Anything] from [exception.value] [Remove] [Anything] from [logentry.formatted]","title":"PII Selectors"},{"location":"pii-config/selectors/#boolean-logic","text":"You can combine selectors using boolean logic. Prefix with ! to invert the selector. foo matches the JSON key foo , while !foo matches everything but foo . Build the conjunction (AND) using && , such as: foo && !extra.foo to match the key foo except when inside of extra . Build the disjunction (OR) using || , such as: foo || bar to match foo or bar .","title":"Boolean Logic"},{"location":"pii-config/selectors/#wildcards","text":"** matches all subpaths, so that foo.** matches all JSON keys within foo . * matches a single path item, so that foo.* matches all JSON keys one level below foo .","title":"Wildcards"},{"location":"pii-config/selectors/#value-types","text":"Select subsections by JSON-type using the following: $string matches any string value $number matches any integer or float value $datetime matches any field in the event that represents a timestamp $array matches any JSON array value $object matches any JSON object Select known parts of the schema using the following: $exception matches a single exception instance in {\"exception\": {\"values\": [...]}} $stacktrace matches a stack trace instance $frame matches a frame $request matches the HTTP request context of an event $user matches the user context of an event $logentry (also applies to the message attribute) $thread matches a single thread instance in {\"threads\": {\"values\": [...]}} $breadcrumb matches a single breadcrumb in {\"breadcrumbs\": [...]} $span matches a trace span $sdk matches the SDK context in {\"sdk\": ...}","title":"Value Types"},{"location":"pii-config/selectors/#examples","text":"Delete event.user : [ Remove ] [ Anything ] from [ $user ] Delete all frame-local variables: [ Remove ] [ Anything ] from [ $frame.vars ]","title":"Examples"},{"location":"pii-config/selectors/#escaping-specal-characters","text":"If the object key you want to match contains whitespace or special characters, you can use quotes to escape it: [ Remove ] [ Anything ] from [ extra.'my special value' ] This matches the key my special value in Additional Data . To escape ' (single quote) within the quotes, replace it with '' (two quotes): [ Remove ] [ Anything ] from [ extra.'my special '' value' ] This matches the key my special ' value in Additional Data .","title":"Escaping Specal Characters"},{"location":"pii-config/types/","text":"PII Rule Types pattern Custom Perl-style regex (PCRE). { \"rules\" : { \"hash_device_id\" : { \"type\" : \"pattern\" , \"pattern\" : \"d/[a-f0-9]{12}\" , \"redaction\" : { \"method\" : \"hash\" } } }, \"applications\" : { \"$string\" : [ \"hash_device_id\" ] } } imei Matches an IMEI or IMEISV. { \"rules\" : { \"hash_imei\" : { \"type\" : \"imei\" , \"redaction\" : { \"method\" : \"hash\" } } }, \"applications\" : { \"$string\" : [ \"hash_imei\" ] } } mac Matches a MAC address. { \"rules\" : { \"hash_mac\" : { \"type\" : \"mac\" , \"redaction\" : { \"method\" : \"hash\" } } }, \"applications\" : { \"$string\" : [ \"hash_mac\" ] } } ip Matches any IP address. { \"rules\" : { \"hash_ip\" : { \"type\" : \"ip\" , \"redaction\" : { \"method\" : \"hash\" } } }, \"applications\" : { \"$string\" : [ \"hash_ip\" ] } } creditcard Matches a creditcard number. { \"rules\" : { \"hash_cc\" : { \"type\" : \"creditcard\" , \"redaction\" : { \"method\" : \"hash\" } } }, \"applications\" : { \"$string\" : [ \"hash_cc\" ] } } userpath Matches a local path (e.g. C:/Users/foo/ ). { \"rules\" : { \"hash_userpath\" : { \"type\" : \"userpath\" , \"redaction\" : { \"method\" : \"hash\" } } }, \"applications\" : { \"$string\" : [ \"hash_userpath\" ] } } anything Matches any value. This is basically equivalent to a wildcard regex. For example, to remove all strings: { \"rules\" : { \"remove_everything\" : { \"type\" : \"anything\" , \"redaction\" : { \"method\" : \"remove\" } } }, \"applications\" : { \"$string\" : [ \"remove_everything\" ] } } multiple Combine multiple rules into one. This is a disjunction (OR): The field in question has to match only one of the rules to match the combined rule, not all of them. { \"rules\" : { \"remove_ips_and_macs\" : { \"type\" : \"multiple\" , \"rules\" : [ \"@ip\" , \"@mac\" ], \"hide_rule\" : false , // Hide the inner rules when showing which rules have been applied. Defaults to false. \"redaction\" : { \"method\" : \"remove\" } } }, \"applications\" : { \"$string\" : [ \"remove_ips_and_macs\" ] } } alias Alias one rule to the other. This is the same as multiple except that you can only wrap one rule. { \"rules\" : { \"remove_ips\" : { \"type\" : \"multiple\" , \"rule\" : \"@ip\" , \"hide_rule\" : false , // Hide the inner rule when showing which rules have been applied. Defaults to false. \"redaction\" : { \"method\" : \"remove\" } } }, \"applications\" : { \"$string\" : [ \"remove_ips\" ] } }","title":"PII Rule Types"},{"location":"pii-config/types/#pii-rule-types","text":"","title":"PII Rule Types"},{"location":"pii-config/types/#pattern","text":"Custom Perl-style regex (PCRE). { \"rules\" : { \"hash_device_id\" : { \"type\" : \"pattern\" , \"pattern\" : \"d/[a-f0-9]{12}\" , \"redaction\" : { \"method\" : \"hash\" } } }, \"applications\" : { \"$string\" : [ \"hash_device_id\" ] } }","title":"pattern"},{"location":"pii-config/types/#imei","text":"Matches an IMEI or IMEISV. { \"rules\" : { \"hash_imei\" : { \"type\" : \"imei\" , \"redaction\" : { \"method\" : \"hash\" } } }, \"applications\" : { \"$string\" : [ \"hash_imei\" ] } }","title":"imei"},{"location":"pii-config/types/#mac","text":"Matches a MAC address. { \"rules\" : { \"hash_mac\" : { \"type\" : \"mac\" , \"redaction\" : { \"method\" : \"hash\" } } }, \"applications\" : { \"$string\" : [ \"hash_mac\" ] } }","title":"mac"},{"location":"pii-config/types/#ip","text":"Matches any IP address. { \"rules\" : { \"hash_ip\" : { \"type\" : \"ip\" , \"redaction\" : { \"method\" : \"hash\" } } }, \"applications\" : { \"$string\" : [ \"hash_ip\" ] } }","title":"ip"},{"location":"pii-config/types/#creditcard","text":"Matches a creditcard number. { \"rules\" : { \"hash_cc\" : { \"type\" : \"creditcard\" , \"redaction\" : { \"method\" : \"hash\" } } }, \"applications\" : { \"$string\" : [ \"hash_cc\" ] } }","title":"creditcard"},{"location":"pii-config/types/#userpath","text":"Matches a local path (e.g. C:/Users/foo/ ). { \"rules\" : { \"hash_userpath\" : { \"type\" : \"userpath\" , \"redaction\" : { \"method\" : \"hash\" } } }, \"applications\" : { \"$string\" : [ \"hash_userpath\" ] } }","title":"userpath"},{"location":"pii-config/types/#anything","text":"Matches any value. This is basically equivalent to a wildcard regex. For example, to remove all strings: { \"rules\" : { \"remove_everything\" : { \"type\" : \"anything\" , \"redaction\" : { \"method\" : \"remove\" } } }, \"applications\" : { \"$string\" : [ \"remove_everything\" ] } }","title":"anything"},{"location":"pii-config/types/#multiple","text":"Combine multiple rules into one. This is a disjunction (OR): The field in question has to match only one of the rules to match the combined rule, not all of them. { \"rules\" : { \"remove_ips_and_macs\" : { \"type\" : \"multiple\" , \"rules\" : [ \"@ip\" , \"@mac\" ], \"hide_rule\" : false , // Hide the inner rules when showing which rules have been applied. Defaults to false. \"redaction\" : { \"method\" : \"remove\" } } }, \"applications\" : { \"$string\" : [ \"remove_ips_and_macs\" ] } }","title":"multiple"},{"location":"pii-config/types/#alias","text":"Alias one rule to the other. This is the same as multiple except that you can only wrap one rule. { \"rules\" : { \"remove_ips\" : { \"type\" : \"multiple\" , \"rule\" : \"@ip\" , \"hide_rule\" : false , // Hide the inner rule when showing which rules have been applied. Defaults to false. \"redaction\" : { \"method\" : \"remove\" } } }, \"applications\" : { \"$string\" : [ \"remove_ips\" ] } }","title":"alias"}]}